name: CI/PR

on: [pull_request]

jobs:
  windows-build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
    - name: Download git-sdk-64-minimal
      shell: bash
      run: a=git-sdk-64-minimal && mkdir -p $a && curl -# https://wingit.blob.core.windows.net/ci-artifacts/$a.tar.xz | tar -C $a -xJf -
    - name: Build
      shell: powershell
      env:
        HOME: ${{runner.workspace}}
        MSYSTEM: MINGW64
        DEVELOPER: 1
        NO_PERL: 1
      run: |
        & .\git-sdk-64-minimal\usr\bin\bash.exe -lc @"
        printf '%s\n' /git-sdk-64-minimal/ >>.git/info/exclude

          ci/make-test-artifacts.sh artifacts
        "@
        if (!$?) { exit(1) }
    - name: Upload build artifacts
      uses: actions/upload-artifact@v1
      with:
        name: windows-artifacts
        path: artifacts
  windows-test:
    runs-on: windows-latest
    needs: [windows-build]
    strategy:
      matrix:
        nr: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    steps:
    - uses: actions/checkout@v1
    - name: Download git-sdk-64-minimal
      shell: bash
      run: a=git-sdk-64-minimal && mkdir -p $a && curl -# https://wingit.blob.core.windows.net/ci-artifacts/$a.tar.xz | tar -C $a -xJf -
    - name: Download build artifacts
      uses: actions/download-artifact@v1
      with:
        name: windows-artifacts
        path: ${{github.workspace}}
    - name: Test
      shell: powershell
      run: |
        & .\git-sdk-64-minimal\usr\bin\bash.exe -lc @"
          test -f artifacts.tar.gz || {
            echo No test artifacts found\; skipping >&2
            exit 0
          }
          tar xf artifacts.tar.gz || exit 1

          # Let Git ignore the SDK
          printf '%s\n' /git-sdk-64-minimal/ >>.git/info/exclude

          ci/run-test-slice.sh ${{matrix.nr}} 10 || {
            ci/print-test-failures.sh
            exit 1
          }
        "@
        if (!$?) { exit(1) }
  vs-build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
    - name: Download git-sdk-64-minimal
      shell: bash
      run: a=git-sdk-64-minimal && mkdir -p $a && curl -# https://wingit.blob.core.windows.net/ci-artifacts/$a.tar.xz | tar -C $a -xJf -
    - name: Generate Visual Studio Solution
      shell: powershell
      env:
        MSYSTEM: MINGW64
        DEVELOPER: 1
        NO_PERL: 1
        GIT_CONFIG_PARAMETERS: "'user.name=CI' 'user.email=ci@git'"
      run: |
        & .\git-sdk-64-minimal\usr\bin\bash.exe -lc @"
          make NDEBUG=1 DEVELOPER=1 vcxproj
        "@
        if (!$?) { exit(1) }
    - name: Download vcpkg artifacts
      shell: powershell
      run: |
        $urlbase = "https://dev.azure.com/git/git/_apis/build/builds"
        $id = ((Invoke-WebRequest -UseBasicParsing "${urlbase}?definitions=9&statusFilter=completed&resultFilter=succeeded&`$top=1").content | ConvertFrom-JSON).value[0].id
        $downloadUrl = ((Invoke-WebRequest -UseBasicParsing "${urlbase}/$id/artifacts").content | ConvertFrom-JSON).value[0].resource.downloadUrl
        (New-Object Net.WebClient).DownloadFile($downloadUrl, "compat.zip")
        Expand-Archive compat.zip -DestinationPath . -Force
        Remove-Item compat.zip
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.0
    - name: MSBuild
      run: msbuild git.sln -property:Configuration=Release -property:Platform=x64 -maxCpuCount:4 -property:PlatformToolset=v142
    - name: Bundle artifact tar
      shell: powershell
      env:
        MSYSTEM: MINGW64
        DEVELOPER: 1
        NO_PERL: 1
        MSVC: 1
        VCPKG_ROOT: ${{github.workspace}}\compat\vcbuild\vcpkg
      run: |
        & compat\vcbuild\vcpkg_copy_dlls.bat release
        if (!$?) { exit(1) }
        & git-sdk-64-minimal\usr\bin\bash.exe -lc @"
          mkdir -p artifacts &&
          eval \"`$(make -n artifacts-tar INCLUDE_DLLS_IN_ARTIFACTS=YesPlease ARTIFACTS_DIRECTORY=artifacts 2>&1 | grep ^tar)\"
        "@
        if (!$?) { exit(1) }
    - name: Upload build artifacts
      uses: actions/upload-artifact@v1
      with:
        name: vs-artifacts
        path: artifacts
  vs-test:
    runs-on: windows-latest
    needs: [vs-build]
    strategy:
      matrix:
        nr: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    steps:
    - uses: actions/checkout@v1
    - name: Download git-64-portable
      shell: bash
      run: a=git-64-portable && mkdir -p $a && curl -# https://wingit.blob.core.windows.net/ci-artifacts/$a.tar.xz | tar -C $a -xJf -
    - name: Download build artifacts
      uses: actions/download-artifact@v1
      with:
        name: vs-artifacts
        path: ${{github.workspace}}
    - name: Test (parallel)
      shell: powershell
      env:
        MSYSTEM: MINGW64
        NO_SVN_TESTS: 1
        GIT_TEST_SKIP_REBASE_P: 1
      run: |
        & git-64-portable\git-cmd.exe --command=usr\bin\bash.exe -lc @"
          test -f artifacts.tar.gz || {
            echo No test artifacts found\; skipping >&2
            exit 0
          }
          tar xf artifacts.tar.gz || exit 1

          # Let Git ignore the SDK and the test-cache
          printf '%s\n' /git-64-portable/ /test-cache/ >>.git/info/exclude

          cd t &&
          PATH=\"`$PWD/helper:`$PATH\" &&
          test-tool.exe run-command testsuite --jobs=10 -V -x --write-junit-xml \
                  `$(test-tool.exe path-utils slice-tests \
                          `$SYSTEM_JOBPOSITIONINPHASE `$SYSTEM_TOTALJOBSINPHASE t[0-9]*.sh)
        "@
        if (!$?) { exit(1) }
  linux-clang:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: install dependencies
      env:
        CC: clang
      run: |
        sudo apt-get update &&
        sudo apt-get -y install git gcc make libssl-dev libcurl4-openssl-dev libexpat-dev tcl tk gettext git-email zlib1g-dev apache2-bin &&
        ci/install-dependencies.sh
    - name: ci/run-build-and-test.sh
      env:
        CC: clang
      run: |
        ci/run-build-and-tests.sh || {
          ci/print-test-failures.sh
          exit 1
        }
  linux-gcc:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: install dependencies
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test &&
        sudo apt-get update &&
        sudo apt-get -y install git gcc make libssl-dev libcurl4-openssl-dev libexpat-dev tcl tk gettext git-email zlib1g-dev apache2 language-pack-is git-svn gcc-8 &&
        ci/install-dependencies.sh
    - name: ci/run-build-and-tests.sh
      run: |
        ci/run-build-and-tests.sh || {
          ci/print-test-failures.sh
          exit 1
        }
  osx-clang:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v1
    - name: install dependencies
      env:
        CC: clang
      run: ci/install-dependencies.sh
    - name: ci/run-build-and-tests.sh
      env:
        CC: clang
      run: |
        ci/run-build-and-tests.sh || {
          ci/print-test-failures.sh
          exit 1
        }
  osx-gcc:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v1
    - name: install dependencies
      run: ci/install-dependencies.sh
    - name: ci/run-build-and-tests.sh
      run: |
        ci/run-build-and-tests.sh || {
          ci/print-test-failures.sh
          exit 1
        }
  GETTEXT_POISON:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: install dependencies
      run: |
        sudo apt-get update &&
        sudo apt-get -y install git gcc make libssl-dev libcurl4-openssl-dev libexpat-dev tcl tk gettext git-email zlib1g-dev
    - name: ci/run-build-and-tests.sh
      env:
        jobname: GETTEXT_POISON
      run: |
        ci/run-build-and-tests.sh || {
          ci/print-test-failures.sh
          exit 1
        }
  linux32:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: ci/run-linux32-docker.sh
      run: |
        res=0
        sudo GITHUB_ACTIONS="$GITHUB_ACTIONS" RUNNER_OS="$RUNNER_OS" GITHUB_REF="$GITHUB_REF" GITHUB_SHA="$GITHUB_SHA" GITHUB_REPOSITORY="$GITHUB_REPOSITORY" GITHUB_RUN_ID="$GITHUB_RUN_ID" CC=$CC MAKEFLAGS="$MAKEFLAGS" bash -lxc ci/run-linux32-docker.sh || res=1
  static-analysis:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: install dependencies
      run: |
        sudo apt-get update &&
        sudo apt-get install -y coccinelle libcurl4-openssl-dev libssl-dev libexpat-dev gettext
    - name: ci/run-static-analysis.sh
      env:
        jobname: StaticAnalysis
      run: ci/run-static-analysis.sh
  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: install dependencies
      run: |
        sudo apt-get update &&
        sudo apt-get install -y asciidoc xmlto asciidoctor docbook-xsl-ns
    - name: ci/test-documentation.sh
      env:
        ALREADY_HAVE_ASCIIDOCTOR: yes.
        jobname: Documentation
      run: ci/test-documentation.sh
